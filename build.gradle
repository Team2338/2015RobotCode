import edu.wpi.first.gradlerio.GradleRIOPlugin

plugins {
	id 'java'
	id "edu.wpi.first.GradleRIO" version "2019.4.1"
}

def ROBOT_MAIN_CLASS = "team.gif.Robot"
def TEAM_NUMBER = 2338

dependencies {
	compile wpi.deps.wpilib()
	compile wpi.deps.vendor.java()
	nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
	nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
}

wrapper {
	gradleVersion = '5.5.1'
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
	targets {
		roboRIO("roborio") {
			// Team number is loaded either from the .wpilib/wpilib_preferences.json
			// or from command line. If not found an exception will be thrown.
			// You can use getTeamOrDefault(team) instead of getTeamNumber if you
			// want to store a team number in this file.

			// team = frc.getTeamNumber()
			team = frc.getTeamOrDefault(TEAM_NUMBER)
		}
	}

	artifacts {
		frcJavaArtifact('frcJava') {
			targets << "roborio"
			// Debug can be overridden by command line, for use with VSCode
			debug = frc.getDebugOrDefault(false)
		}

		// Built in artifact to deploy arbitrary files to the roboRIO.
		fileTreeArtifact('frcStaticFileDeploy') {
			// The directory below is the local directory to deploy
			files = fileTree(dir: 'src/main/deploy')
			// Deploy to RoboRIO target, into /home/lvuser/deploy
			targets << "roborio"
			directory = '/home/lvuser/deploy'
		}
	}
}

jar {
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	manifest GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}
